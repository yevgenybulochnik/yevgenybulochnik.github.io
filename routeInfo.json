{"template":"__react_static_root__/src/pages/index.tsx","sharedHashesByProp":{},"data":{"articles":[{"title":"Linux Commands","slug":"linux-commands","desc":"Living document that serves as a reference for various linux commands","published":"9-17-2020","updated":"10-05-2020","tags":["Linux","Devops"],"contents":"<h1 id=\"linux-commands-reference\">Linux Commands Reference</h1>\n<p>This article serves as a living document for various Linux commands. It is continuously updated and will be used as a reference document for various commands I may use frequently or infrequently! Flag definitions will be included as needed.</p>\n<ul>\n<li>Get count of files in a directory<pre><code class=\"language-bash\">ls <span class=\"hljs-string\">| wc -l</span>\nls -a <span class=\"hljs-string\">| wc -l</span>\nls -A <span class=\"hljs-string\">| wc -l</span></code></pre>\n<ul>\n<li>Flags<ul>\n<li>-a, --all</li>\n<li>-A, --almost-all</li>\n<li>-l, --lines</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Get count of specific file type in a directory<pre><code class=\"language-bash\">ls | grep <span class=\"hljs-string\">&#x27;.html&#x27;</span> | wc -l\n<span class=\"hljs-builtin-name\">find</span> -name <span class=\"hljs-string\">&#x27;*.html&#x27;</span> | wc -l\n<span class=\"hljs-builtin-name\">find</span> . -maxdepth 1 -name <span class=\"hljs-string\">&#x27;*.html&#x27;</span> | wc -l</code></pre>\n</li>\n</ul>\n"},{"title":"Jupyter Notebook References","slug":"jupyter-reference","desc":"Living document that serves as a reference for jupyter notebooks","published":"10-18-2020","updated":"10-18/2020","tags":["Python","Data","Analytics"],"contents":"<h1 id=\"jupyter-notebook-references\">Jupyter Notebook References</h1>\n<p>This article is a living reference for various Jupyter notebook commands and configurations. Im a huge fan of jupyterlab so many of these references will apply to labs.</p>\n<h3 id=\"import-a-local-module-or-package-and-auto-reload-on-code-change\">Import a local module or package and auto-reload on code change</h3>\n<p>Many times you may want to write code in a text editor or work on creating a python package to be used within a jupyter notebook. Additionally, its convenient to have this code auto-reload whenever you rerun a jupyter cell. If your notebook is not run at your project root sometimes this can cause issues with imports. Adding the following to a notebook can help.</p>\n<ol>\n<li><p>Append to the python sys.path</p>\n<pre><code class=\"language-python\"> <span class=\"hljs-keyword\">import</span> sys\n <span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> <span class=\"hljs-type\">Path</span>\n\n module_path = Path(&quot;/some/parent/path&quot;).resolve()\n sys.path.append(str(module_path))</code></pre>\n</li>\n<li><p>Enable auto-reload</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-tag\"> %<span class=\"hljs-selector-tag\">load_ext</span></span> autoreload\n<span class=\"hljs-tag\">\n %<span class=\"hljs-selector-tag\">autoreload</span></span> 2</code></pre>\n</li>\n</ol>\n"}],"projects":[{"title":"HRSA Findings Dashboard","slug":"hrsa-findings-dashboard","desc":"This fullstack project uses flask as an api and React for the frontend. Data is scraped from HRSA, manipulated and fed into a filterable dashboard","published":"9-17-2020","tags":["FullStack","Python","Flask","React","Scrapy"],"contents":"<h1 id=\"hrsa-findings-dashboard\">HRSA Findings Dashboard</h1>\n<h3 id=\"demo\"><a href=\"https://yevgenybulochnik.com/hrsa-findings-dashboard\">Demo</a></h3>\n<p>This project really came out of my completion of the <a href=\"https://www.apexus.com/340b-certificate-program\">340B ACE</a> certification. After completing the program, immediately my mind went to finding data and outcomes related to audits. As it turns out the <a href=\"https://www.hrsa.gov/\">Health Resources and Services Administration</a>, otherwise known as HRSA, publishes some of its national audit findings.</p>\n<h4 id=\"hrsa-program-integrity\">HRSA Program Integrity</h4>\n<hr>\n<p>HRSA 340B program findings are periodically updated <a href=\"https://www.hrsa.gov/opa/program-integrity/index.html\">here</a>. The findings are split out by year, and available in the right sidebar under a section called <strong>Audits of Covered Entity Results</strong>. Each page of findings contains a single HTML table with data associated with the respective entity&#39;s audit.</p>\n<img src=\"https://assets.yevgenybulochnik.com/hrsa_findings_table.png\" width=\"100%\">\n\n<p>You may already see some issues with the way this is setup. For example, how about these questions:</p>\n<ul>\n<li>How many audits happen yearly?</li>\n<li>How many audits have been completed in general over time?</li>\n<li>How often are there actually findings as a result of an audit?</li>\n<li>What are the most common findings?</li>\n<li>How frequently do audits occur in my state?</li>\n</ul>\n<p>With how this data is being presented, these seemingly basic questions are actually fairly difficult to answer. Moreover, one might think a simple copy paste into an excel document, plus a pivot table would do the trick. This, however, produces some erroneous rows occasionally. Not to mention it requires quite a bit of manual data munging.</p>\n<h4 id=\"the-beauty-in-automation\">The Beauty in Automation</h4>\n<hr>\n<p>From the start I wanted to create an automated solution for data collection, data munging and data processing. Enter the amazing open source python web crawler <a href=\"https://scrapy.org/\">Scrapy</a>. Using scrapy&#39;s built in <a href=\"https://docs.scrapy.org/en/latest/topics/items.html\">Items</a>, <a href=\"https://docs.scrapy.org/en/latest/topics/loaders.html\">Itemloaders</a> and <a href=\"https://docs.scrapy.org/en/latest/topics/item-pipeline.html\">Pipelines</a> creating more structured data was a breeze. Also, scrapy provided a method for cleaning up the sometimes unstructured html table tags. Below is the example code used to scrape elements from those tables.</p>\n<pre><code class=\"language-python\"><span class=\"hljs-keyword\">for</span> row <span class=\"hljs-keyword\">in</span> table_rows:\n    il = <span class=\"hljs-constructor\">ItemLoader(<span class=\"hljs-params\">item</span>=HrsafindingsItem()</span>, selector=row)\n    il.add<span class=\"hljs-constructor\">_value(&#x27;<span class=\"hljs-params\">year</span>&#x27;, Path(<span class=\"hljs-params\">response</span>.<span class=\"hljs-params\">request</span>.<span class=\"hljs-params\">url</span>)</span>.stem)\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">entity</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">th</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">text</span>()</span>&#x27;)\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">entity</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">th</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">child</span>::<span class=\"hljs-operator\">*</span>&#x27;)</span>\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">hrsa_id</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">td</span>[1]<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">text</span>()</span>&#x27;)\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">hrsa_id</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">td</span>[1]<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">child</span>::<span class=\"hljs-operator\">*</span>&#x27;)</span>\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">state</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">td</span>[2]<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">text</span>()</span>&#x27;)\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">state</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">td</span>[2]<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">child</span>::<span class=\"hljs-operator\">*</span>&#x27;)</span>\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">opa_findings</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">td</span>[3]<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">text</span>()</span>&#x27;)\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">opa_findings</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">td</span>[3]<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">child</span>::<span class=\"hljs-operator\">*</span>&#x27;)</span>\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">sanction</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">td</span>[4]&#x27;)</span>\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">cap_status</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">td</span>[5]<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">text</span>()</span>&#x27;)\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">cap_status</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">td</span>[5]<span class=\"hljs-operator\">/</span><span class=\"hljs-params\">child</span>::<span class=\"hljs-operator\">*</span>&#x27;)</span>\n    il.add<span class=\"hljs-constructor\">_xpath(&#x27;<span class=\"hljs-params\">entity_contact</span>&#x27;, &#x27;.<span class=\"hljs-operator\">/</span><span class=\"hljs-operator\">/</span><span class=\"hljs-params\">td</span>[6]&#x27;)</span>\n    yield il.load<span class=\"hljs-constructor\">_item()</span></code></pre>\n<p>To get around some of the funny HTML structure, calls to the same item keys, <code>opa_findings</code> for example, are used to concatenate text used in multiple HTML elements. This is necessary due to some of the table rows having sometimes hidden characters or unexpected HTML tags which are not immediately obvious to the naked eye.</p>\n<p>In addition, custom functions were used to further sanitize the data, including regular expressions to &quot;tag&quot; each record based on finding type for better filtering. An example of a parsed row is below:</p>\n<pre><code class=\"language-json\">{\n    <span class=\"hljs-attr\">&quot;year&quot;</span>: <span class=\"hljs-string\">&quot;fy-20-results&quot;</span>,\n    <span class=\"hljs-attr\">&quot;entity&quot;</span>: <span class=\"hljs-string\">&quot;Ascension Seton DBA Ascension Seton Medical Center Austin&quot;</span>,\n    <span class=\"hljs-attr\">&quot;hrsa_id&quot;</span>: <span class=\"hljs-string\">&quot;DSH450056&quot;</span>,\n    <span class=\"hljs-attr\">&quot;state&quot;</span>: <span class=\"hljs-string\">&quot;TX&quot;</span>,\n    <span class=\"hljs-attr\">&quot;opa_findings&quot;</span>: <span class=\"hljs-string\">&quot;No adverse findings&quot;</span>,\n    <span class=\"hljs-attr\">&quot;sanction&quot;</span>: <span class=\"hljs-string\">&quot;None&quot;</span>,\n    <span class=\"hljs-attr\">&quot;cap_status&quot;</span>: <span class=\"hljs-string\">&quot;N/A--Audit closure date: April 29, 2020&quot;</span>,\n    <span class=\"hljs-attr\">&quot;entity_contact&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>,\n    <span class=\"hljs-attr\">&quot;full_year&quot;</span>: <span class=\"hljs-string\">&quot;2020&quot;</span>,\n    <span class=\"hljs-attr\">&quot;entity_abv&quot;</span>: <span class=\"hljs-string\">&quot;DSH&quot;</span>,\n    <span class=\"hljs-attr\">&quot;closure_date&quot;</span>: <span class=\"hljs-string\">&quot;April 29, 2020&quot;</span>,\n    <span class=\"hljs-attr\">&quot;tags&quot;</span>: <span class=\"hljs-string\">&quot;no_findings&quot;</span>\n}</code></pre>\n<p>With all this a single command <code>scrapy crawl findings_spider</code>, will automatically find all the HRSA Program Integrity HTML tables, parse all those tables, and clean up that data to get a single structured json file.</p>\n<h4 id=\"the-rest-api\">The Rest-API</h4>\n<hr>\n<p>The next step was to make this data easily consumable. I decided to use <a href=\"https://flask.palletsprojects.com\">Flask</a> and a serialization library called <a href=\"https://marshmallow.readthedocs.io\">Marshmallow</a> to build out a simple rest api. It was necessary to create quite a few custom query parameters to help filtering the data, so <a href=\"https://webargs.readthedocs.io\">WebArgs</a> seemed like a logical addition. The api hosts 4 endpoints.</p>\n<table>\n<thead>\n<tr>\n<th>Endpoint</th>\n<th>Method</th>\n<th>Query Params</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/records</td>\n<td>Get</td>\n<td>states, hrsa_designations, years, findings_keywords, entity_keywords, tags</td>\n</tr>\n<tr>\n<td>/filteritems</td>\n<td>Get</td>\n<td>None</td>\n</tr>\n<tr>\n<td>/summary</td>\n<td>Get</td>\n<td>states, hrsa_designations</td>\n</tr>\n<tr>\n<td>/summary/findings</td>\n<td>Get</td>\n<td>states, hrsa_designations, years</td>\n</tr>\n</tbody></table>\n<p>As you can imagine the records endpoint provides a list of audit rows, with the option to filter by specific query parameters. Filteritems are a unique list of states, hrsa designations, tags and years to feed the frontend auto suggest inputs. This way as you type in the filters, an automated suggestion gets displayed. The last two endpoints provide summary data using groupby queries.</p>\n<h4 id=\"the-dashboard\">The Dashboard</h4>\n<hr>\n<p>Lastly, the dashboard itself was built using <a href=\"https://www.typescriptlang.org\">Typescript</a> and <a href=\"https://reactjs.org\">React</a>. <a href=\"https://blueprintjs.com/docs/\">Blueprintjs</a> was used a component library along with <a href=\"https://github.com/tannerlinsley/react-table\">React-Table</a> to make a custom display table for audit records. The dashboard was bootstrapped with <a href=\"https://github.com/facebook/create-react-app\">Create-React-App</a>, otherwise known as CRA.</p>\n<p>My intent with the dashboard was to have two separate pages. One that would just show aggregate summary data, ie the <a href=\"https://yevgenybulochnik.com/hrsa-findings-dashboard\">overview</a> page, while the <a href=\"https://yevgenybulochnik.com/hrsa-findings-dashboard/explore\">other</a> would show more granular data with additional filter options. I decided to use <a href=\"https://redux.js.org/\">Redux</a> and <a href=\"https://redux-saga.js.org/\">Redux-Saga</a> for application state management. The other piece that is unique to the frontend code was allowing the dashboard to be built with the option of using the API or for the data to actually be embedded. This &quot;modular&quot; data setup allows me to serve the application using github pages, with the option to deploy  with the API if necessary using environmental variables.</p>\n<h4 id=\"conclusions\">Conclusions</h4>\n<hr>\n<p>This project was really a testament to what the combination of pharmacy domain knowledge plus programming knowledge can produce. Now one may think, well this could be created using excel and tableau! However, when considering this took one developer (myself) maybe a week to produce, leverages free open sources tools and is served publicly for free, it becomes easier to see the value. Not to mention, data processing through data visualization is automated.</p>\n<p>Overall, this project was very fun and interesting to work on. My hope is the dashboard itself can be used to gain better insight into the 340B Program while also drumming up interest for pharmacists to get into programming!</p>\n"},{"title":"Medimap Lite","slug":"medimap-lite","desc":"Lite version of a fullstack project to visualize medicare costing data for various HCPCS Codes. Data for Oregon is embedded in the javascript bundle.","published":"10-27-2020","tags":["React","Python","Leafletjs"],"contents":"<h1 id=\"medimap-lite\">Medimap Lite</h1>\n<h3 id=\"demo\"><a href=\"https://yevgenybulochnik.com/medimap-lite\">Demo</a></h3>\n<p>This is an interesting project born out of a data set my brother showed me. The <a href=\"https://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/Medicare-Provider-Charge-Data/Physician-and-Other-Supplier2017\">data set</a>, published by CMS, shows annualized charges and payments per NPI for HCPCS codes billed by various physicians and facilities. It has a mix of what appears to be facility fees and physician professional fees, with the most recent data coming from 2017.</p>\n<p>My brother had a great idea, what if it was possible to geomap this dataset. How interesting would it be to see payment and reimbursement differences by geographical locations, or at the very least explore the data set with more an emphasis on location. Could this data be used to increase pricing transparency? How much do charges differ for the same HCPCS codes based on provider location? How much of a difference is there between what providers/facilities charge vs how much medicare reimburses?</p>\n<h4 id=\"data-munging-and-wrangling\">Data Munging and Wrangling</h4>\n<hr>\n<p>This CMS dataset was one of the larger sets I have worked with. It was pleasantly surprising how easily (given enough ram) it was to manipulate using python and <a href=\"https://pandas.pydata.org/docs/\">pandas</a>. Immediately, a few concerns came up. First many of the addresses assigned to NPI numbers were &quot;programmatically&quot; unique, but in reality were the same addresses. Some had an additional unit number or secondary street address for example. It would be unrealistic to geomap all 10 million records individually. A more sound approach would be to identify all unique addresses, geo tag those, then reassign them back so specific providers/facilities. A similar approach was used to map HCPCS codes to specific charges.</p>\n<p>As I continued to explore the dataset, some more caveats became obvious. First, it appeared the charges are always associated with only one location. The location tied to the providers or facilities NPI number. If a provider, for example, worked at multiple locations the charges would all fall under whatever location that providers NPI number was registered at. Another concern, was what appeared to be a mix of professional fees and facility fees for some charges. In some cases it was easy to see the facility vs professional fee charge, in others it seemed like both were rolled into one.</p>\n<p>In the end, I was able to parse the entire dataset and split out records based on states. I developed a custom python module to help me accomplish this.</p>\n<h4 id=\"fun-with-geotagging\">Fun with Geotagging</h4>\n<hr>\n<p>The next setup was to figure out how to actually geotag all these locations. Most would reach for google maps geolocation api, but I found <a href=\"https://geocod.io\">geocodio</a> to be more hassle free. Their platform offered a free account (without providing credit card info) and allowed 2500 free geotags per day. To keep costs to a minimal, my custom python module accounts for this daily limit. For the state of oregon, there are over 4000 locations. The non-lite version of this project uses a cron job to geotag daily, keeping this limit in mind.</p>\n<h4 id=\"the-map\">The Map</h4>\n<hr>\n<p>The actual map was built using <a href=\"https://leafletjs.com/\">leafletjs</a> and more specifically a React wrapper around leaflet called <a href=\"https://react-leaflet.js.org/\">React-Leaflet</a>. This coupled with <a href=\"https://blueprintjs.com/docs/#select/suggest\">blueprintjs</a> suggest component to create a searchable drop down for HCPCS codes. I&#39;m a huge fan of <a href=\"https://react-table.tanstack.com/docs/overview\">React-Table</a> and its hook based approach, so it drives all the tables in the application.</p>\n<h4 id=\"the-bundle\">The Bundle</h4>\n<hr>\n<p>The final js bundle for this application includes a fairly large dataset embedded in it. This was done deliberately as a way to host the project on github pages without the need to host an api as well. As this is the &quot;lite&quot; version of this project, it only includes the state of Oregon and the most frequently charged HCPCS codes. Surprisingly, chrome can handle as much as 60k records simply stored in the browser. There are noticeable performance hits with this approach, specifically with the &quot;9921&quot; HCPCS codes.</p>\n<h4 id=\"conclusions\">Conclusions</h4>\n<hr>\n<p>Overall, this was a very fun project to work on. Both the full version which includes a full api + frontend and this lite version. The dataset itself is very intriguing, especially when comparing charges vs medicare reimbursement rates. Its interesting to see the wide variation of charges for a given HCPCS code with the juxtaposition of a largely flat medicare reimbursement rate. It begs many questions around cost, cost transparency and reimbursement in general.</p>\n"}]},"path":"/"}
